@inproceedings{2014raft,
    author = {Diego Ongaro and John Ousterhout},
    title = {In Search of an Understandable Consensus Algorithm},
    booktitle = {Proceedings of the 2014 {USENIX} Annual Technical Conference ({USENIX} {ATC} `14)},
    year = {2014},
    isbn = {978-1-931971-10-2},
    address = {Philadelphia, USA},
    pages = {305--319},
    url = {https://www.usenix.org/conference/atc14/technical-sessions/presentation/ongaro},
    publisher = {{USENIX} Association},
    month = jun,
}

@inproceedings {2010zookeeper,
    author = {Patrick Hunt and Mahadev Konar and Flavio P. Junqueira and Benjamin Reed},
    title = {{ZooKeeper}: Wait-free Coordination for Internet-scale Systems},
    booktitle = {Proceedings of the 2010 USENIX Annual Technical Conference (USENIX ATC `10)},
    year = {2010},
    isbn = {978-1-931971-75-1},
    address = {Boston, USA},
    pages = {145--158},
    url = {https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems},
    publisher = {USENIX Association},
    month = jun,
}

@INPROCEEDINGS{1999redirection,  
author={Cardellini, Valeria and Colajanni, Michele and Yu, Philip S.},  
booktitle={Proceedings of the 19\textsuperscript{th} IEEE International Conference on Distributed Computing Systems},   
title={Redirection algorithms for load sharing in distributed Web-server systems},   
year={1999}, pages={528--535},  doi={10.1109/ICDCS.1999.776555}}

@incollection{2004cdn,
  title={Computing on the edge: A platform for replicating internet applications},
  author={Rabinovich, Michael and Xiao, Zhen and Aggarwal, Amit},
  booktitle={Web content caching and distribution},
  pages={57--77},
  year={2004},
  publisher={Springer}
}
@inproceedings{2004democratizing,
  title={Democratizing Content Publication with Coral},
  author={Freedman, Michael J. and Freudenthal, Eric and Mazières, David},
  booktitle={Proceedings of the First Symposium on Networked Systems Design and Implementation (NSDI `04)},
  address={San Francisco, USA},
  year={2004},
  month=mar
}
@INPROCEEDINGS{2020dns,
  author={Ahmad, Nur Zaimah and Zuhairi, Megat F. and Dao, Hassan and Yafi, Eiad},
  booktitle={2020 14\textsuperscript{th} International Conference on Ubiquitous Information Management and Communication (IMCOM)}, 
  title={DNS Server Caching and Forwarding with Load Balance}, 
  year={2020},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/IMCOM48794.2020.9001768}}

@inproceedings{1997consistenthashing,
author = {Karger, David and Lehman, Eric and Leighton, Tom and Panigrahy, Rina and Levine, Matthew and Lewin, Daniel},
title = {Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web},
year = {1997},
isbn = {0897918886},
publisher = {Association for Computing Machinery},
address = {New York, USA},
url = {https://doi.org/10.1145/258533.258660},
doi = {10.1145/258533.258660},
booktitle = {Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing (STOC `97)},
pages = {654–663},
numpages = {10},
location = {El Paso, Texas, USA}
}

@article{2001chord,
author = {Stoica, Ion and Morris, Robert and Karger, David and Kaashoek, M. Frans and Balakrishnan, Hari},
title = {Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications},
year = {2001},
issue_date = {October 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/964723.383071},
doi = {10.1145/964723.383071},
abstract = {A fundamental problem that confronts peer-to-peer applications is to efficiently locate the node that stores a particular data item. This paper presents Chord, a distributed lookup protocol that addresses this problem. Chord provides support for just one operation: given a key, it maps the key onto a node. Data location can be easily implemented on top of Chord by associating a key with each data item, and storing the key/data item pair at the node to which the key maps. Chord adapts efficiently as nodes join and leave the system, and can answer queries even if the system is continuously changing. Results from theoretical analysis, simulations, and experiments show that Chord is scalable, with communication cost and the state maintained by each node scaling logarithmically with the number of Chord nodes.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = oct,
pages = {149–160},
numpages = {12}
}

@misc{2016chbl,
  author    = {Mirrokni, Vahab S. and
               Thorup, Mikkel and
               Zadimoghaddam, Morteza},
  title     = {Consistent Hashing with Bounded Loads},
  year      = {2016},
  archivePrefix = "arXiv",
  eprint = "1608.01350",
  primaryClass = "cs.DS",
  url = {https://arxiv.org/abs/1608.01350}
}

@misc{rfc1034,
	series =	{Request for Comments},
	number =	1034,
	howpublished =	{RFC 1034},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC1034},
	url =		{https://www.rfc-editor.org/info/rfc1034},
        author =	{Mockapetris, P.{\,}V.},
	title =		{Domain Names -- Concepts and Facilities},
	pagetotal =	55,
	year =		1987,
	month =		nov,
	abstract =	{This RFC is the revised basic definition of The Domain Name System. It obsoletes RFC-882. This memo describes the domain style names and their used for host address look up and electronic mail forwarding. It discusses the clients and servers in the domain name system and the protocol used between them.},
}

@misc{rfc1035,
	series =	{Request for Comments},
	number =	1035,
	howpublished =	{RFC 1035},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC1035},
	url =		{https://www.rfc-editor.org/info/rfc1035},
        author =	{Mockapetris, P.{\,}V.},
	title =		{Domain Names -- Implementation and Specification},
	pagetotal =	55,
	year =		1987,
	month =		nov,
	abstract =	{This RFC is the revised specification of the protocol and format used in the implementation of the Domain Name System. It obsoletes RFC-883. This memo documents the details of the domain name client - server communication.},
}

@inproceedings{2006chubby,
author = {Burrows, Mike},
title = {The Chubby Lock Service for Loosely-Coupled Distributed Systems},
year = {2006},
isbn = {1931971471},
publisher = {USENIX Association},
address = {USA},
abstract = {We describe our experiences with the Chubby lock service, which is intended to provide coarse-grained locking as well as reliable (though low-volume) storage for a loosely-coupled distributed system. Chubby provides an interface much like a distributed file system with advisory locks, but the design emphasis is on availability and reliability, as opposed to high performance. Many instances of the service have been used for over a year, with several of them each handling a few tens of thousands of clients concurrently. The paper describes the initial design and expected use, compares it with actual use, and explains how the design had to be modified to accommodate the differences.},
booktitle = {Proceedings of the 7\textsuperscript{th} Symposium on Operating Systems Design and Implementation (OSDI `06)},
pages = {335–350},
numpages = {16},
location = {Seattle, USA}
}

@misc{grpc,
  author={gRPC Authors},
  title = {{gRPC}: A high performance, open source universal RPC framework},
  url = {https://grpc.io/},
  note = {Accessed June 1, 2022}
}

@misc{go,
    author={Google},
    title={The Go Programming Language Specification},
    url={https://go.dev/ref/spec},
    year={2022},
    month=mar,
    note = {Version of March 10, 2022}
}

@article{1992dnscaching,
author = {Danzig, Peter B. and Obraczka, Katia and Kumar, Anant},
title = {An Analysis of Wide-Area Name Server Traffic: A Study of the Internet Domain Name System},
year = {1992},
issue_date = {Oct. 1992},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/144191.144301},
doi = {10.1145/144191.144301},
abstract = {Over a million computers implement the Internet's Domain Name System of DNS, making it the world's most distributed database and the Internet's most significant source of wide-area RPC-like traffic. Last year, over eight percent of the packets and four percent of the bytes that traversed the NSFnet were due to DNS. We estimate that a third of this wide-area DNS traffic was destined to seven root name servers. This paper explores the performance of DNS based on two 24-hour traces of traffic destined to one of these root name servers. It considers the effectiveness of name caching and retransmission timeout calculation, shows how algorithms to increase DNS's resiliency lead to disastrous behavior when servers fail or when certain implementation faults are triggered, explains the paradoxically high fraction of wide-area DNS packets, and evaluates the impact of flaws in various implementations of DNS. It shows that negative caching would improve DNS performance only marginally in an internet of correctly implemented name servers. It concludes by calling for a fundamental change in the way we specify and implement future name servers and distributed applications.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = oct,
pages = {281–292},
numpages = {12}
}

@article{2002dnscaching,
author = {Jung, Jaeyeon and Sit, Emil and Balakrishnan, Hari and Morris, Robert},
title = {DNS Performance and the Effectiveness of Caching},
year = {2002},
issue_date = {October 2002},
publisher = {IEEE Press},
volume = {10},
number = {5},
issn = {1063-6692},
url = {https://doi.org/10.1109/TNET.2002.803905},
doi = {10.1109/TNET.2002.803905},
abstract = {This paper presents a detailed analysis of traces of domain name system (DNS) and associated TCP traffic collected on the Internet links of the MIT Laboratory for Computer Science and the Korea Advanced Institute of Science and Technology (KAIST). The first part of the analysis details how clients at these institutions interact with the wide-area domain name system, focusing on client-perceived performance and the prevalence of failures and errors. The second part evaluates the effectiveness of DNS caching.In the most recent MIT trace, 23% of lookups receive no answer; these lookups account for more than half of all traced DNS packets since query packets are retransmitted overly persistently. About 13% of all lookups result in an answer that indicates an error condition. Many of these errors appear to be caused by missing inverse (IP-to-name) mappings or NS records that point to nonexistent or inappropriate hosts. 27% of the queries sent to the root name servers result in such errors.The paper also presents the results of trace-driven simulations that explore the effect of varying TTLs and varying degrees of cache sharing on DNS cache hit rates. Due to the heavy-tailed nature of name accesses, reducing the TTLs of address (A) records to as low as a few hundred seconds has little adverse effect on hit rates, and little benefit is obtained from sharing a forwarding DNS cache among more than 10 or 20 clients. These results suggest that client latency is not as dependent on aggressive caching as is commonly believed, and that the widespread use of dynamic low-TTL A-record bindings should not greatly increase DNS related wide-area network traffic.},
journal = {IEEE/ACM Trans. Netw.},
month = oct,
pages = {589–603},
numpages = {15},
keywords = {internet, DNS, measurement, performance, caching}
}

@InProceedings{2012siphash,
author="Aumasson, Jean-Philippe and Bernstein, Daniel J.",
editor="Galbraith, Steven and Nandi, Mridul",
title="SipHash: A Fast Short-Input PRF",
booktitle="Progress in Cryptology -- INDOCRYPT 2012",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="489--508",
abstract="SipHash is a family of pseudorandom functions optimized for short inputs. Target applications include network traffic authentication and hash-table lookups protected against hash-flooding denial-of-service attacks. SipHash is simpler than MACs based on universal hashing, and faster on short inputs. Compared to dedicated designs for hash-table lookup, SipHash has well-defined security goals and competitive performance. For example, SipHash processes a 16-byte input with a fresh key in 140 cycles on an AMD FX-8150 processor, which is much faster than state-of-the-art MACs. We propose that hash tables switch to SipHash as a hash function.",
isbn="978-3-642-34931-7"
}

@inproceedings{2011hashdos,
  title={Efficient Denial of Service Attacks on Web Application Platforms},
  author={Klink, Alexander and Wälde, Julian},
  booktitle={28\textsuperscript{th} Chaos Communication Congress},
  address={Berlin, Germany},
  year={2011},
  month=dec
}
